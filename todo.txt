
DONE    only one index- and filedesc-file
        
DONE    scroll: do not draw right column when at end of screenbuffer
DONE    scroll: do not draw left column when at beginning of screenbuffer
DONE    scroll: draw left column
DONE    scroll: reaching-end-of-level detection => add metadata to generated source files and use at '.ps_update_xpos' and '.pdnt_done'

DONE    scroll: status bytes => status-bits

DONE    scroll: usage of second buffer and buffer-switching each frame
DONE    scroll: filling of third buffer for bob-restoring
        
DONE    output memory usage to console on exit

DONE    player: playersprite moves with joystick input
DONE    player: animation (normal, moving up, moving down)
DONE    player: collision detection with explosion (anim+sfx)
DONE    player: shots when pressing fire (with delay between shots), just play sample in the first place

DONE    panel: lives and score
NOPE    panel: include in color fade ?

DONE    joystick.asm

DONE    fade: move vars to global om-structure

DONE    IG_EXIT: only one user? delete as macro and include code at user location

DONE    mainmenu: fade in and out
DONE    REFACTOR: do_fade to fade.asm, FadeIn and FadeOut bits to general bits
DONE    mainmenu: animate blue lightning bar
DONE    mainmenu: use joystick to switch options and start level or exit accordingly
DONE    mainmenu: show credits (graphics, music and code)

DONE    ingame: exit back to mainmenu
DONE    REFACTOR: all colors in copperlist to black -> no need to set them to black in code

DONE    fade: switch to proportional steps when fading
        
DONE    sfx.asm
        
DONE    convert todo.txt and all readme.txt's to markdown



        check error codes after os calls

DONE    scroll: switch buffers even when there is no more scrolling

DONE    playershots: shots are bobs and do not collide in the first place
DOME    playershots: collision detection with bitplanes
DONE    playershots: switch to small explosion

DONE    bob.asm: clip blits (top, bottom, left)
        bob.asm: refactor to use pointerlist to ALL bob's, so no special treatment is necessary when restoring (playershots, playershot-explosion...)

DONE    split update for playershots and enemies in position-update and drawing (because collision detection will later happen between these two steps)
DONE    read enemy metadata from level file (no hard-coding of spawning, position, type of enemy etc.)
DONE       add "multiplier", so more enemies get spawned by one object in tmx file (delay in frames and counter in properties in tmx object)
           add offset in movement table for multi-object, so they follow the exact same route through the level
DONE    correctly deactivate bob of enemy
DONE    move enemies by movement-schemes (ods)
DONE    collision detection playershots to enemies
DONE      enemy-dies-explosion as special bob

        faster shots? lower delay between shots? means more shots at a time.

        score and lives counter

        REFACTOR: alloc chip and other mem through exec.library (not sections in code)
